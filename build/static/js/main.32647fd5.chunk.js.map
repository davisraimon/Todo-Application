{"version":3,"sources":["components/Header.js","actions/todoActions.js","actions/types.js","components/FormComponent.js","components/EditTodo.js","components/TodoItem.js","components/Contents.js","reducers/todoReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","propTypes","PropTypes","string","isRequired","updateTodo","id","data","dispatch","a","config","headers","axios","post","res","type","payload","message","success","error","Option","Select","connect","addTodo","useState","buckets","JSON","parse","localStorage","getItem","newBucket","items","setItems","bucket","completed","formData","setFormData","setError","onClickSubmit","e","preventDefault","clear","layout","className","style","marginTop","marginBottom","padding","gutter","xs","sm","md","lg","xl","Item","value","onChange","onChangeBucket","placeholder","dropdownRender","menu","margin","display","flexWrap","height","flex","target","onChangeBucketField","cursor","onClick","newBucketList","length","setItem","stringify","onAddBucket","map","key","name","htmlType","block","func","getTodoById","clearTodoById","todoReducer","object","state","get","match","todoItem","editmode","loading","history","useEffect","undefined","params","push","initialValue","rules","required","to","removeTodo","delete","warn","completedStatus","setCompletedStatus","actions","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","defaultChecked","onConfirm","shape","danger","EditOutlined","color","getTodo","todoList","backgroundColor","item","_id","$oid","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","exact","path","component","FormComponent","EditTodo","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.32647fd5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../App.css\";\r\n\r\nconst Header = ({ title }) => {\r\n  return <></>;\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import { GET_TODO, GET_TODO_BY_ID, CLEAR_TODO_BY_ID } from \"./types\";\r\nimport axios from \"axios\";\r\nimport { message } from \"antd\";\r\n\r\nexport const getTodo = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"/get-todo\");\r\n    dispatch({ type: GET_TODO, payload: res.data });\r\n  } catch (err) {\r\n    message.error(\"Server Error\");\r\n  }\r\n};\r\nexport const getTodoById = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`/get-todo/${id}`);\r\n    dispatch({ type: GET_TODO_BY_ID, payload: res.data });\r\n  } catch (err) {\r\n    message.error(\"Server Error\");\r\n  }\r\n};\r\nexport const clearTodoById = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_TODO_BY_ID, payload: \"\" });\r\n};\r\nexport const addTodo = (data) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  try {\r\n    const res = await axios.post(\"/add-todo\", data, config);\r\n    dispatch({ type: GET_TODO, payload: res.data });\r\n    message.success(\"Added\");\r\n  } catch (err) {\r\n    message.error(\"Server Error\");\r\n  }\r\n};\r\nexport const removeTodo = (id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.delete(`/delete-todo/${id}`);\r\n    dispatch({ type: GET_TODO, payload: res.data });\r\n    message.warn(\"Removed\");\r\n  } catch (err) {\r\n    message.error(\"Server Error\");\r\n  }\r\n};\r\nexport const updateTodo = (id, data) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  try {\r\n    const res = await axios.post(`/edit-todo//${id}`, data, config);\r\n    dispatch({ type: GET_TODO, payload: res.data });\r\n    message.success(\"Updated\");\r\n  } catch (err) {\r\n    message.error(\"Server Error\");\r\n  }\r\n};\r\n","export const GET_TODO = \"GET_TODO\";\r\nexport const GET_TODO_BY_ID = \"GET_TODO_BY_ID\";\r\nexport const CLEAR_TODO_BY_ID = \"CLEAR_TODO_BY_ID\";\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Row, Col, Button, Input, Select, Divider } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"../App.css\";\r\nimport { addTodo } from \"../actions/todoActions\";\r\nimport { connect } from \"react-redux\";\r\nconst { Option } = Select;\r\n\r\nconst FormComponent = ({ addTodo }) => {\r\n  const [items, setItems] = useState({\r\n    buckets: JSON.parse(localStorage.getItem(\"buckets\")) || [\"Important\"],\r\n    newBucket: \"\",\r\n  });\r\n  const [formData, setFormData] = useState({\r\n    bucket: \"Important\",\r\n    title: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  const { buckets, newBucket } = items;\r\n  const { bucket, title, completed } = formData;\r\n  const onAddBucket = () => {\r\n    // Adding new Bucket to existing BucketList\r\n    const newBucketList = [\r\n      ...buckets,\r\n      newBucket || `New item ${buckets.length++}`,\r\n    ];\r\n    // Updating the buckets state with newBucket\r\n    setItems({\r\n      buckets: newBucketList,\r\n      newBucket: \"\",\r\n    });\r\n    // Saving the newBucketList to cache\r\n    localStorage.setItem(\"buckets\", JSON.stringify(newBucketList));\r\n  };\r\n  const onChangeBucketField = (e) => {\r\n    setItems({ buckets: [...buckets], newBucket: e.target.value });\r\n  };\r\n  const [error, setError] = useState(false);\r\n  const validate = () => {\r\n    if (title === \"\") {\r\n      setError(true);\r\n      return false;\r\n    }\r\n    setError(false);\r\n    return true;\r\n  };\r\n  const onClickSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      addTodo(formData);\r\n      clear();\r\n    }\r\n  };\r\n  const clear = () => {\r\n    setFormData({ bucket: \"Important\", title: \"\" });\r\n  };\r\n  const onChangeTitle = (value) => {\r\n    setFormData({ ...formData, title: value });\r\n  };\r\n  const onChangeBucket = (value) => {\r\n    setFormData({ ...formData, bucket: value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        layout=\"horizontal\"\r\n        className=\"todo-form\"\r\n        style={{ marginTop: 20, marginBottom: 20, padding: 5 }}\r\n      >\r\n        <Row gutter={20}>\r\n          <Col xs={24} sm={24} md={7} lg={5} xl={4}>\r\n            <Form.Item>\r\n              <Select\r\n                value={bucket}\r\n                onChange={(value) => {\r\n                  onChangeBucket(value);\r\n                }}\r\n                placeholder=\"Select a bucket\"\r\n                dropdownRender={(menu) => (\r\n                  <div>\r\n                    {menu}\r\n                    <Divider style={{ margin: \"4px 0\" }} />\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexWrap: \"nowrap\",\r\n                        padding: 8,\r\n                        height: 48,\r\n                      }}\r\n                    >\r\n                      <Input\r\n                        style={{ flex: \"auto\" }}\r\n                        value={newBucket}\r\n                        placeholder=\"Grocery\"\r\n                        onChange={(e) => {\r\n                          onChangeBucketField(e);\r\n                        }}\r\n                      />\r\n                      <a\r\n                        style={{\r\n                          flex: \"none\",\r\n                          padding: \"8px\",\r\n                          display: \"block\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => {\r\n                          onAddBucket();\r\n                        }}\r\n                      >\r\n                        Add Bucket\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              >\r\n                {buckets.map((bucket) => (\r\n                  <Option key={bucket} value={bucket}>\r\n                    {bucket}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col xs={24} sm={24} md={10} lg={14} xl={16}>\r\n            <Form.Item name=\"title\">\r\n              <Input\r\n                placeholder=\"What needs to be done?\"\r\n                type=\"text\"\r\n                value={title}\r\n                onChange={(e) => {\r\n                  onChangeTitle(e.target.value);\r\n                }}\r\n              />\r\n              <span className={`${error ? \"error\" : \"no-error\"}`}>\r\n                *This field is required\r\n              </span>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col xs={24} sm={24} md={7} lg={5} xl={4}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              onClick={(e) => onClickSubmit(e)}\r\n              block\r\n            >\r\n              {/* <PlusCircleFilled /> */}\r\n              Remember this\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nFormComponent.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addTodo })(FormComponent);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  Divider,\r\n  Spin,\r\n  Space,\r\n} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"../App.css\";\r\nimport { updateTodo, getTodoById, clearTodoById } from \"../actions/todoActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nconst { Option } = Select;\r\n\r\nconst EditTodo = ({\r\n  updateTodo,\r\n  getTodoById,\r\n  clearTodoById,\r\n  match,\r\n  todoReducer: { todoItem, editmode, loading },\r\n  history,\r\n}) => {\r\n  const [items, setItems] = useState({\r\n    buckets: JSON.parse(localStorage.getItem(\"buckets\")) || [\r\n      \"Important\",\r\n      \"Medium\",\r\n    ],\r\n    newBucket: \"\",\r\n  });\r\n\r\n  const [formData, setFormData] = useState({\r\n    bucket: \"\",\r\n    title: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (todoItem[0] === undefined) {\r\n      getTodoById(match.params.id);\r\n    }\r\n    setFormData({\r\n      bucket: todoItem[0] !== undefined ? todoItem[0].bucket : \"\",\r\n      title: todoItem[0] !== undefined ? todoItem[0].title : \"\",\r\n      completed: todoItem[0] !== undefined ? todoItem[0].completed : \"\",\r\n    });\r\n  }, [editmode]);\r\n\r\n  const { buckets, newBucket } = items;\r\n  const { bucket, title, completed } = formData;\r\n\r\n  const onAddBucket = () => {\r\n    // Adding new Bucket to existing BucketList\r\n    const newBucketList = [\r\n      ...buckets,\r\n      newBucket || `New item ${buckets.length++}`,\r\n    ];\r\n    // Updating the buckets state with newBucket\r\n    setItems({\r\n      buckets: newBucketList,\r\n      newBucket: \"\",\r\n    });\r\n    // Saving the newBucketList to cache\r\n    localStorage.setItem(\"buckets\", JSON.stringify(newBucketList));\r\n  };\r\n\r\n  const onChangeBucketField = (e) => {\r\n    setItems({ buckets: [...buckets], newBucket: e.target.value });\r\n  };\r\n  const [error, setError] = useState(false);\r\n  const validate = () => {\r\n    if (title === \"\") {\r\n      setError(true);\r\n      return false;\r\n    }\r\n    setError(false);\r\n    return true;\r\n  };\r\n  const onClickSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      updateTodo(match.params.id, formData);\r\n      clearTodoById();\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const onChangeTitle = (value) => {\r\n    setFormData({ ...formData, title: value });\r\n  };\r\n\r\n  const onChangeBucket = (value) => {\r\n    setFormData({ ...formData, bucket: value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Space>\r\n          <Spin />\r\n        </Space>\r\n      ) : (\r\n        <Form\r\n          layout=\"horizontal\"\r\n          className=\"todo-form\"\r\n          style={{ marginTop: 20, marginBottom: 20, padding: 5 }}\r\n        >\r\n          <Row gutter={20}>\r\n            <Col xs={24} sm={24} md={7} lg={5} xl={4}>\r\n              <Form.Item>\r\n                <Select\r\n                  value={bucket}\r\n                  onChange={(value) => {\r\n                    onChangeBucket(value);\r\n                  }}\r\n                  placeholder=\"Select a bucket\"\r\n                  dropdownRender={(menu) => (\r\n                    <div>\r\n                      {menu}\r\n                      <Divider style={{ margin: \"4px 0\" }} />\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flexWrap: \"nowrap\",\r\n                          padding: 8,\r\n                          height: 48,\r\n                        }}\r\n                      >\r\n                        <Input\r\n                          style={{ flex: \"auto\" }}\r\n                          value={newBucket}\r\n                          placeholder=\"Grocery\"\r\n                          onChange={(e) => {\r\n                            onChangeBucketField(e);\r\n                          }}\r\n                        />\r\n                        <a\r\n                          style={{\r\n                            flex: \"none\",\r\n                            padding: \"8px\",\r\n                            display: \"block\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => {\r\n                            onAddBucket();\r\n                          }}\r\n                        >\r\n                          Add Bucket\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                >\r\n                  {buckets.map((bucket) => (\r\n                    <Option key={bucket} value={bucket}>\r\n                      {bucket}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col xs={24} sm={24} md={10} lg={14} xl={16}>\r\n              <Form.Item\r\n                initialValue={title}\r\n                rules={[{ required: true, message: \"This field is required\" }]}\r\n              >\r\n                <Input\r\n                  placeholder=\"What needs to be done?\"\r\n                  type=\"text\"\r\n                  value={title}\r\n                  onChange={(e) => {\r\n                    onChangeTitle(e.target.value);\r\n                  }}\r\n                />\r\n                <span className={`${error ? \"error\" : \"no-error\"}`}>\r\n                  *This field is required\r\n                </span>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col xs={24} sm={24} md={4} lg={3} xl={2}>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={(e) => onClickSubmit(e)}\r\n                block\r\n              >\r\n                {/* <PlusCircleFilled /> */}\r\n                Update\r\n              </Button>\r\n            </Col>\r\n            <Col xs={24} sm={24} md={3} lg={3} xl={2}>\r\n              <Link to=\"/\" onClick={clearTodoById}>\r\n                {/* <PlusCircleFilled /> */}\r\n                Cancel\r\n              </Link>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nupdateTodo.propTypes = {\r\n  updateTodo: PropTypes.func.isRequired,\r\n  getTodoById: PropTypes.func.isRequired,\r\n  clearTodoById: PropTypes.func.isRequired,\r\n  todoReducer: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  todoReducer: state.todoReducer,\r\n});\r\nexport default connect(mapStateToProps, {\r\n  updateTodo,\r\n  getTodoById,\r\n  clearTodoById,\r\n})(EditTodo);\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tooltip, Tag, List, Button, Popconfirm, Switch } from \"antd\";\r\nimport { CloseOutlined, CheckOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeTodo, updateTodo } from \"../actions/todoActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../App.css\";\r\n\r\nconst TodoItem = ({ id, bucket, title, completed, removeTodo, updateTodo }) => {\r\n  const [completedStatus, setCompletedStatus] = useState(completed);\r\n  const onTodoToggle = () => {\r\n    setCompletedStatus(!completedStatus);\r\n    updateTodo(id, { bucket: bucket, title: title, completed: !completed });\r\n  };\r\n  return (\r\n    <List.Item\r\n      actions={[\r\n        <Tooltip\r\n          title={completedStatus ? \"Mark as uncompleted\" : \"Mark as completed\"}\r\n        >\r\n          <Switch\r\n            checkedChildren={<CheckOutlined />}\r\n            unCheckedChildren={<CloseOutlined />}\r\n            onChange={() => onTodoToggle()}\r\n            defaultChecked={completedStatus}\r\n          />\r\n        </Tooltip>,\r\n        <Popconfirm\r\n          title=\"Are you sure you want to delete?\"\r\n          onConfirm={() => {\r\n            removeTodo(id);\r\n          }}\r\n        >\r\n          <Button\r\n            className=\"remove-todo-button\"\r\n            type=\"primary\"\r\n            shape=\"circle\"\r\n            danger\r\n          >\r\n            X\r\n          </Button>\r\n        </Popconfirm>,\r\n        <Button className=\"remove-todo-button\" type=\"primary\" shape=\"circle\">\r\n          <Link to={`/edit/${id}`}>\r\n            <EditOutlined />\r\n          </Link>\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <div className=\"hide-sm\">\r\n        <Tag className=\"todo-tag-bucket\">{bucket}</Tag>\r\n      </div>\r\n      <div className=\"todo-item\">\r\n        <Tag color={completedStatus ? \"cyan\" : \"red\"} className=\"todo-tag\">\r\n          {title}\r\n        </Tag>\r\n      </div>\r\n    </List.Item>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  bucket: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  completed: PropTypes.bool.isRequired,\r\n  updateTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { removeTodo, updateTodo })(TodoItem);\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { connect } from \"react-redux\";\r\nimport { getTodo } from \"../actions/todoActions\";\r\nimport { List, Spin, Space } from \"antd\";\r\nimport \"../App.css\";\r\n\r\nconst Contents = ({\r\n  getTodo,\r\n  todoReducer: { todoList, editmode, loading },\r\n}) => {\r\n  useEffect(() => {\r\n    if (todoList.length === 0) {\r\n      getTodo();\r\n    }\r\n  }, [getTodo]);\r\n  return (\r\n    <div className={`${editmode ? \"focus-out\" : \"\"}`}>\r\n      <List style={{ backgroundColor: \"white\", padding: 5, margin: 5 }}>\r\n        {todoList.length !== 0 ? (\r\n          todoList.map((item) => (\r\n            <TodoItem\r\n              key={item._id.$oid}\r\n              id={item._id.$oid}\r\n              title={item.title}\r\n              completed={item.completed}\r\n              bucket={item.bucket}\r\n            />\r\n          ))\r\n        ) : loading ? (\r\n          <Space>\r\n            <Spin />\r\n          </Space>\r\n        ) : (\r\n          <h4>Nothing to do!</h4>\r\n        )}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nContents.propTypes = {\r\n  getTodo: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  todoReducer: state.todoReducer,\r\n});\r\nexport default connect(mapStateToProps, { getTodo })(Contents);\r\n","import { GET_TODO, GET_TODO_BY_ID, CLEAR_TODO_BY_ID } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  todoList: [],\r\n  todoItem: {},\r\n  loading: true,\r\n  editmode: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case GET_TODO:\r\n      return {\r\n        ...state,\r\n        todoList: payload,\r\n        loading: false,\r\n        editmode: false,\r\n      };\r\n    case GET_TODO_BY_ID:\r\n      return { ...state, todoItem: payload, loading: false, editmode: true };\r\n    case CLEAR_TODO_BY_ID:\r\n      return { ...state, todoItem: {}, loading: true, editmode: false };\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport todoReducer from \"./todoReducer\";\r\n\r\nexport default combineReducers({ todoReducer });\r\n","import thunk from \"redux-thunk\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport FormComponent from \"./components/FormComponent\";\nimport EditTodo from \"./components/EditTodo\";\nimport Contents from \"./components/Contents\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header title=\"TODO Application\" />\n        <Router>\n          <Route exact path=\"/\" component={FormComponent} />         \n          <Route exact path=\"/edit/:id\" component={EditTodo} />\n          <Contents />\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}